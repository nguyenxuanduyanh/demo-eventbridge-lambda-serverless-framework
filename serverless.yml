org: nxdanh
app: my-aws-node-express-api-app
service: my-aws-node-express-api-app

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  eventBridge:
    useCloudFormation: true
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - events:PutEvents
            - states:StartExecution
          Resource: '*'

plugins:
  - serverless-offline
  - serverless-offline-aws-eventbridge
  - serverless-step-functions

custom:
  serverless-offline-aws-eventbridge:
    port: 4010 # port to run the eventBridge mock server on
    mockEventBridgeServer: true # Set to false if EventBridge is already mocked by another stack
    hostname: 127.0.0.1 # IP or hostname of existing EventBridge if mocked by another stack
    pubSubPort: 4011 # Port to run the MQ server (or just listen if using an EventBridge Mock server from another stack)
    debug: false # flag to show debug messages
    account: '' # account id that gets passed to the event
    maximumRetryAttempts: 10 # maximumRetryAttempts to retry lambda
    retryDelayMs: 500 # retry delay
    payloadSizeLimit: "100mb" # Controls the maximum payload size being passed to https://www.npmjs.com/package/bytes (Note: this payload size might not be the same size as your AWS Eventbridge receive)

resources:
  Resources:
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: signup
  Outputs:
    MyStateMachine:
      Description: The ARN of the example state machine
      Value:
        Ref: MyStateMachine

functions:
  invokeEventBridge:
    handler: invokeEventBridge.handler
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY

  consumer1:
    handler: consumer.successHandler
    events:
      - eventBridge: 
          eventBus: !Ref EventBus
          pattern:
            source:
              - custom.myATMapp
            detail-type:
              - UserSignup
            detail:
              state:
                - success

  consumer2:
    handler: consumer.failHandler
    events:
      - eventBridge: 
          eventBus: !Ref EventBus
          pattern:
            source:
              - custom.myATMapp
            detail-type:
              - UserSignup
            detail:
              state:
                - fail

  invokeStepFunction:
    handler: handler.handler
    environment:
      statemachine_arn: ${self:resources.Outputs.MyStateMachine.Value}
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY

stepFunctions:
  stateMachines:
    yourWateMachine:
      name: myStateMachine
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: FirstState
        States:
          FirstState:
            Type: Task
            Resource: 'arn:aws:states:::events:putEvents'
            Parameters:
              Entries:
                - Detail.$: $.Detail
                  DetailType: UserSignup
                  EventBusName: signup
                  Source: custom.myATMapp
            End: true